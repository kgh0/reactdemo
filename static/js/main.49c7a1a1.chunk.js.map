{"version":3,"sources":["pages/Login.jsx","action/LoginAction.js","pages/Main.jsx","action/MainAction.js","App.js","serviceWorker.js","reduce/LoginReducer.js","reduce/MainReducer.js","configureStore.js","index.js"],"names":["LoginUI","props","handleSubmit","e","preventDefault","form","validateFields","err","values","username","password","window","localStorage","setItem","history","push","message","error","this","isFetching","data","console","log","loggedIn","getItem","getFieldDecorator","LoginForm","tip","spinning","className","onSubmit","Item","rules","required","prefix","type","placeholder","htmlType","to","React","Component","WrappedNormalLoginForm","create","name","Login","connect","state","ownProps","login","dispatch","loginClick","url","baseUrl","fetch","method","mode","then","rs","json","receviePostOnError","getUser","Head","lazy","Home","GdMap","Connect","List","MainContent","SubMenu","Header","Footer","Sider","Content","style","padding","exact","path","component","Main","getMenus","menu","size","fallback","temp","main","App","Boolean","location","hostname","match","LoginReduce","action","Object","assign","MainReducer","rootReducer","createBrowserHistory","combineReducers","LoginReducer","loggerMiddleware","createLogger","preloadedState","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.49c7a1a1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getUser } from \"../action/LoginAction\"\r\nimport { Form, Spin, message, Input, Icon, Button } from 'antd';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass LoginUI extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            debugger;\r\n            if (!err) {\r\n                if (values.username == \"admin\" && values.password == '123') {\r\n                    window.localStorage.setItem(\"loggedIn\", true);\r\n                    this.props.history.push(\"/\");\r\n                    debugger;\r\n                    // let tmp = this.props.loginClick(values.username, values.password);\r\n                    // console.log(tmp);\r\n                } else {\r\n                    message.error(\"账号密码错误\", 1);\r\n                }\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        debugger;\r\n        const { isFetching, data, error } = this.props;\r\n\r\n        if (!!data) {\r\n            debugger;\r\n            console.log(this.props.history);\r\n            // this.props.history.push(\"/\");\r\n            window.localStorage.setItem(\"loggedIn\", true);\r\n        }\r\n        const loggedIn = window.localStorage.getItem('loggedIn');\r\n\r\n        const { getFieldDecorator } = this.props.form;\r\n        const LoginForm = (\r\n<Spin tip=\"logining...\" spinning={isFetching}>\r\n            <div className=\"login-container\">\r\n                \r\n                    <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                        <div className=\"sub-title\">登 录</div>\r\n                        <Form.Item>\r\n                            {\r\n                                getFieldDecorator(\"username\", {\r\n                                    rules: [{ required: true, message: \"请输入用户名\" }],\r\n                                })(\r\n                                    <Input prefix={<Icon type=\"user\" className=\"login-icon\" />} placeholder=\"用户名\" />\r\n                                )\r\n                            }\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            {getFieldDecorator('password', {\r\n                                rules: [{ required: true, message: '请输入密码!' }],\r\n                            })(\r\n                                <Input prefix={<Icon type=\"lock\" className='login-icon' />} type=\"password\" placeholder=\"密码123\" />,\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">登录</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n           \r\n            </div>\r\n            </Spin>\r\n        )\r\n\r\n        return (\r\n            loggedIn ? (<Redirect to=\"/\" />) : LoginForm\r\n        )\r\n    }\r\n}\r\nconst WrappedNormalLoginForm = Form.create({ name: \"normal_login\" })(LoginUI);\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    debugger;\r\n    const { isFetching, data, error } = state.login;\r\n\r\n    return {\r\n        isFetching,\r\n        data,\r\n        error\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    loginClick: (username, password) => {\r\n        debugger;\r\n        return dispatch(getUser(username, password));\r\n    }\r\n})\r\n\r\nconst Login = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(WrappedNormalLoginForm);\r\n\r\nexport default Login;","import fetch from 'cross-fetch';\r\nimport { baseUrl } from \"./constant\";\r\n\r\n// const headers = {\r\n//     \"Content-Type\": \"application/json; charset=UTF-8\"\r\n// };\r\n\r\nexport const REQUEST_POSTS = 'Login/REQUEST_POSTS';\r\n\r\n// 发起请求\r\nconst requestPosts = () => {\r\n    return {\r\n        type: REQUEST_POSTS,\r\n    }\r\n\r\n};\r\n\r\nexport const RECEIVE_POSTS = 'Login/RECEIVE_POSTS'\r\n\r\n//通知 reducer 请求成功的 action\r\nconst receviePostOnSuccess = (data) => {\r\n    return {\r\n        type: RECEIVE_POSTS,\r\n        data: data\r\n    }\r\n}\r\n//通知 reducer 请求失败的 action。\r\nconst receviePostOnError = (message) => {\r\n    return {\r\n        type: RECEIVE_POSTS,\r\n        error: message\r\n    }\r\n}\r\n\r\n//action fun xhr查询。\r\nexport const getUser = (username, password)=> {\r\n    debugger;\r\n    return (dispatch) => {\r\n        let url = baseUrl + \"/user/login/\" + username + \"/\" + password;\r\n        dispatch(requestPosts());\r\n        fetch(url,{\r\n            method:\"Get\",\r\n            mode:\"cors\"\r\n        }).then(rs => rs.json(), error => {\r\n            debugger;\r\n            dispatch(receviePostOnError(error.message));\r\n        }).then(rs => {\r\n            debugger;\r\n            dispatch(receviePostOnSuccess(rs));\r\n            console.log(\"hello\")\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React, { lazy, Suspense } from 'react';\r\nimport { Redirect, Switch, Route, Link, withRouter } from 'react-router-dom';\r\nimport { Layout, Menu, Spin } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport { getMenus } from \"../action/MainAction\"\r\n\r\n// import Head from \"./Head\";\r\n// import Home from \"./Home\";\r\n// import GdMap from \"./GdMap\";\r\n// import Connect from \"./Connect\";\r\n// import List from \"./List\";\r\n// import Head from \"./Head\";\r\nconst Head = lazy(() => import('./Head'));\r\nconst Home = lazy(() => import('./Home'));\r\nconst GdMap = lazy(() => import('./GdMap'));\r\nconst Connect = lazy(() => import('./Connect'));\r\nconst List = lazy(() => import('./List'));\r\n\r\n\r\n\r\nconst { Item, SubMenu } = Menu;\r\nconst { Header, Footer, Sider, Content } = Layout;\r\n\r\nconst MainContent = () => {\r\n    return (\r\n        <div style={{ padding: '10px' }}>\r\n            <div>\r\n                <Switch>\r\n                    <Route exact path=\"/home\" component={Home} />\r\n                    <Route exact path=\"/user/list\" component={List} />\r\n                    <Route exact path=\"/user/connect\" component={Connect} />\r\n                    <Route exact path=\"/gdmap\" component={GdMap} />\r\n                    <Redirect to=\"/home\" />\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nclass Main extends React.Component {\r\n\r\n    componentWillMount() {\r\n        debugger;\r\n        const { getMenus } = this.props;\r\n        getMenus();\r\n    }\r\n\r\n    render() {\r\n        debugger;\r\n        const loggedIn = window.localStorage.getItem(\"loggedIn\");\r\n        const { isFetching, menu } = this.props;\r\n        return (\r\n            loggedIn ? (<div >\r\n                {isFetching ?\r\n                    <Spin size=\"large\" spinning={isFetching} /> :\r\n                    <Suspense fallback={<Spin size=\"large\" />}>\r\n                        <Layout >\r\n                            <Head menu={menu} />\r\n                            <MainContent />\r\n                        </Layout>\r\n                    </Suspense>\r\n                }\r\n            </div>) : (<Redirect to=\"/login\" />)\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    debugger;\r\n    const { isFetching, data, error } = state.main;\r\n    return { isFetching, menu: data, error };\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    getMenus: (username) => {\r\n        debugger;\r\n        return dispatch(getMenus(username));\r\n    }\r\n})\r\n\r\nconst temp = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Main);\r\n\r\nexport default temp;","import fetch from 'cross-fetch';\r\nimport { baseUrl } from \"./constant\";\r\n\r\nexport const REQUEST_POSTS = 'Menu/REQUEST_POSTS';\r\n\r\n// 发起请求\r\nconst requestPosts = () => {\r\n    return {\r\n        type: REQUEST_POSTS,\r\n    }\r\n\r\n};\r\n\r\nexport const RECEIVE_POSTS = 'Menu/RECEIVE_POSTS'\r\n\r\n//通知 reducer 请求成功的 action\r\nconst receviePostOnSuccess = (data) => {\r\n    return {\r\n        type: RECEIVE_POSTS,\r\n        data: data\r\n    }\r\n}\r\n//通知 reducer 请求失败的 action。\r\nconst receviePostOnError = (message) => {\r\n    return {\r\n        type: RECEIVE_POSTS,\r\n        error: message\r\n    }\r\n}\r\n\r\nexport const getMenus = (username) => {\r\n    debugger;\r\n    return (dispatch) => {\r\n        let url =baseUrl +\"/menu/getMenus/\";\r\n        dispatch(requestPosts());\r\n        fetch(url, {\r\n            method: \"Get\",\r\n            mode: \"cors\"\r\n        }).then(rs => rs.json(), error => {\r\n            debugger;\r\n            dispatch(receviePostOnError(error.message));\r\n        }).then(rs => {\r\n            debugger;\r\n            dispatch(receviePostOnSuccess(rs));\r\n            console.log(rs);\r\n        })\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { Route, Switch, BrowserRouter,Redirect } from 'react-router-dom';\nimport Login from \"./pages/Login\";\nimport Main from \"./pages/Main\";\n\n// import moment from 'moment';\n// import 'moment/locale/zh-cn';\n\n// moment.locale('zh-cn');\n\nclass App extends React.Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/login\" component={Login} />\n          <Route  path=\"/\" component={Main} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </BrowserRouter>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import { combineReducers } from \"redux\";\r\nimport {RECEIVE_POSTS,REQUEST_POSTS} from \"../action/LoginAction\";\r\n\r\n\r\n\r\nconst LoginReduce = (state = { isFetching: false }, action) => {\r\n    debugger;\r\n    switch (action.type) {\r\n        case REQUEST_POSTS:\r\n            return Object.assign({}, state, {\r\n                isFetching: true\r\n            });\r\n        case RECEIVE_POSTS:\r\n            return Object.assign({}, state, {\r\n                isFetching: false,\r\n                data: action.data,\r\n                error: action.error\r\n            })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default LoginReduce ;","import { REQUEST_POSTS, RECEIVE_POSTS } from \"../action/MainAction\";\r\n\r\nconst MainReducer = (state = { isFetching: false }, action) => {\r\n    debugger;\r\n    switch (action.type) {\r\n        case REQUEST_POSTS:\r\n            return Object.assign({}, state, {\r\n                isFetching: true\r\n            });\r\n        case RECEIVE_POSTS:\r\n            return Object.assign({}, state, {\r\n                isFetching: false,\r\n                data: action.data,\r\n                error: action.error\r\n            })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default MainReducer;","import { createStore, applyMiddleware,combineReducers } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport { createBrowserHistory } from 'history';\r\nimport LoginReducer from \"./reduce/LoginReducer\";\r\nimport MainReducer from \"./reduce/MainReducer\";\r\n\r\nexport const history = createBrowserHistory()\r\n\r\nconst rootReducer = combineReducers({\r\n    // router: connectRouter(history),\r\n    login: LoginReducer,\r\n    main: MainReducer\r\n})\r\nconst loggerMiddleware = createLogger();\r\n\r\nexport default function configureStore(preloadedState) {\r\n    return createStore(\r\n        rootReducer,\r\n        preloadedState,\r\n        applyMiddleware(thunkMiddleware, loggerMiddleware)\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './pages/less/index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {  createBrowserHistory} from 'history';\n\nimport { Provider } from 'react-redux';\nimport configureStore from \"./configureStore\";\nconst store = configureStore()\n\nReactDOM.render( <Provider store={store}>\n  \n        <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}